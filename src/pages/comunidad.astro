---
import BaseLayout from '../layouts/BaseLayout.astro';
const pageTitle = "Nuestra Comunidad";
import PersonCard from '../components/PersonCard.astro';
import { supabase } from '../lib/supabaseClient';

// Fetch Comite Directivo
const { data: comite, error: comiteError } = await supabase
  .from('comite_directivo')
  .select('*')
  .order('id');

// Fetch Fundadores
const { data: fundadores, error: fundadoresError } = await supabase
  .from('fundadores')
  .select('*')
  .order('id');

// Fetch Puntos Nacionales de Contacto
const { data: puntos, error: puntosError } = await supabase
  .from('puntos_nacionales_de_contacto')
  .select('*')
  .order('id');

// Fetch Asesores Internacionales
const { data: asesores, error: asesoresError } = await supabase
  .from('asesores_internacionales')
  .select('*')
  .order('full_name');

// Fetch Miembros
const { data: miembros, error: miembrosError } = await supabase
  .from('miembros')
  .select('*')
  .in('agree_to_publish_profile', ['Yes', 'Si', 'Si/Yes', 'YES', 'Sí', 'SÍ', 'Yes/Si', 'Yes/Sí'])
  .order('full_name');

if (comiteError) console.error(comiteError);
if (fundadoresError) console.error(fundadoresError);
if (puntosError) console.error(puntosError);
if (asesoresError) console.error(asesoresError);
if (miembrosError) console.error(miembrosError);
---

<BaseLayout pageTitle={pageTitle}>
  <div>
    <!-- Tabs -->
    <div class="tabs">
      <button data-tab="comite" class="active">Comité Directivo</button>
      <button data-tab="fundadores">Fundadores</button>
      <button data-tab="puntos">Puntos Nacionales de Contacto</button>
      <button data-tab="asesores">Asesores Internacionales</button>
      <button data-tab="miembros">Miembros</button>
    </div>

    <!-- Tab Sections -->
    <div class="content">
      <!-- Comite Directivo -->
      <div id="comite" class="tab-section">
        <div class="grid">
          {comite?.map(person => (
            <PersonCard person={person} />
          ))}
        </div>
      </div>

      <!-- Fundadores -->
      <div id="fundadores" class="tab-section hidden">
        <div class="grid">
          {fundadores?.map(person => (
            <PersonCard person={person} />
          ))}
        </div>
      </div>

      <!-- Puntos Nacionales Table -->
      <div id="puntos" class="tab-section hidden">
        <div class="table-container">
          <table>
            <thead>
              <tr>
                <th>Nombre completo</th>
                <th>País</th>
                <th>Afiliación</th>
                <th>Correo</th>
              </tr>
            </thead>
            <tbody>
              {(puntos ?? []).map(person => (
                <tr>
                  <td>{person.full_name}</td>
                  <td>{person.country}</td>
                  <td>{person.affiliation}</td>
                  <td>{person.email}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      <!-- Asesores Internacionales Table -->
      <div id="asesores" class="tab-section hidden">
        <div class="table-container">
          <table>
            <thead>
              <tr>
                <th>Nombre completo</th>
                <th>País</th>
                <th>Ciudad</th>
                <th>Educación</th>
                <th>Afiliación</th>
                <th>Intereses de investigación</th>
                <th>Ubicación</th>
                <th>Email profesional</th>
                <th>Red social</th>
              </tr>
            </thead>
            <tbody>
              {(asesores ?? []).map(person => (
                <tr>
                  <td>{person.full_name}</td>
                  <td>{person.home_country}</td>
                  <td>{person.city}</td>
                  <td>{person.education}</td>
                  <td>{person.affiliation}</td>
                  <td>{person.research_interests}</td>
                  <td>{person.location}</td>
                  <td>{person.professional_email}</td>
                  <td>{person.links_social_media}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

      <!-- Miembros Table -->
      <div id="miembros" class="tab-section hidden">
        <div class="table-container">
          <table>
            <thead>
              <tr>
                <th>Nombre completo</th>
                <th>País</th>
                <th>Ciudad</th>
                <th>Educación</th>
                <th>Afiliación</th>
                <th>Intereses de investigación</th>
                <th>Ubicación</th>
                <th>Email profesional</th>
                <th>Red social</th>
              </tr>
            </thead>
            <tbody>
              {(miembros ?? []).map(person => (
                <tr>
                  <td>{person.full_name}</td>
                  <td>{person.home_country}</td>
                  <td>{person.city}</td>
                  <td>{person.education}</td>
                  <td>{person.affiliation}</td>
                  <td>{person.research_interests}</td>
                  <td>{person.location}</td>
                  <td>{person.professional_email}</td>
                  <td>{person.links_social_media}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.querySelectorAll(".tabs button").forEach((btn) => {
      const button = btn as HTMLElement; // <- cast to HTMLElement
      button.addEventListener("click", () => {
        // Remove active class from all buttons
        document.querySelectorAll(".tabs button").forEach(b => b.classList.remove("active"));
        button.classList.add("active");

        // Hide all sections
        document.querySelectorAll(".tab-section").forEach(s => s.classList.add("hidden"));

        // Show selected section
        const section = document.getElementById(button.dataset.tab!);
        if (section) section.classList.remove("hidden");
      });
    });
  </script>

  <style>
    /* Tabs */
    .tabs {
      display: flex;
      gap: 1rem;
      margin-bottom: 1rem;
      flex-wrap: wrap;
    }
    .tabs button {
      padding: 0.5rem 1rem;
      border: none;
      background: #eee;
      cursor: pointer;
      border-radius: 6px;
      flex: 1 1 auto;
      min-width: 120px;
    }
    .tabs button.active {
      background: #333;
      color: white;
    }

    /* Hide tab sections */
    .tab-section.hidden {
      display: none;
    }

    /* Grid cards */
    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(230px, 1fr));
      gap: 1rem;
      padding: 1rem 0;
      justify-items: center; /* center cards horizontally */
    }

    /* Table container for horizontal scroll */
    .table-container {
      width: 100%;
      overflow-x: auto;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      min-width: 600px; /* ensures table columns don’t get too narrow */
      margin-top: 1rem;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 0.5rem;
    }
    th {
      background: #f4f4f4;
      text-align: left;
    }

    /* Responsive adjustments */
    @media (max-width: 500px) {
      .grid {
        grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
      }
      .tabs {
        flex-direction: column;
      }
    }
  </style>
</BaseLayout>
